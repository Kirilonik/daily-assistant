from telegram import *
from telegram.ext import *
from dotenv import load_dotenv
import os
from ollama import generate_chat_response
from storage import ChatMode, user_storage
from voice import get_text_from_message, generate_voice_response


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
    if update.message.forward_origin is not None:
        return
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_storage.get_user(user_id)
    if user:
        if user['username'] != username:
            user_storage.update_username(user_id, username)
    else:
        user_storage.create_user(user_id, username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_storage.get_processing_state(user_id):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    user_storage.set_processing_state(user_id, True)

    try:
        chat_mode = user_storage.get_chat_mode(user_id, username)
        chat_history = user_storage.get_chat_history(user_id)
        # last_message = chat_history[-1] if chat_history else ""
        temp = await update.message.reply_text("–î—É–º–æ–µ–º...")

        if (update.message.text != None):
            chat_in = update.message.text.replace('/assistant', '').strip()
        else:
            if update.message.reply_to_message and update.message.reply_to_message.voice:
                chat_in = await get_text_from_message(update.message.reply_to_message, context)
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /assistant –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å–µ –Ω–∞ –Ω–µ–≥–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /assistant.")

        
        prompt = "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. \n" + chat_in
        print(f'user_id: {user_id}')
        print(f'prompt: {prompt}')
        print(f'chat_mode: {chat_mode}')
        # print(f'last_message: {last_message}')


        if chat_mode == ChatMode.TEXT:
            await update.message.chat.send_action(action="TYPING")
            chat_out = await generate_chat_response(prompt, temp, context=context)
            await update.message.reply_text(chat_out)
        elif chat_mode == ChatMode.VOICE:
            await update.message.chat.send_action(action="RECORD_VOICE")
            chat_out = await generate_voice_response(prompt, temp, context=context, update=update)
            await update.message.reply_text("üó£Ô∏è\n" + chat_out)
        
        print("--------------------------------")
        await context.bot.delete_message(chat_id=temp.chat_id, message_id=temp.message_id)
        user_storage.add_message(user_id, username, chat_in, chat_out)
        return chat_out
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        user_storage.set_processing_state(user_id, False)