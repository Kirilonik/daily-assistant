from bot_logic import handle_message
from dotenv import load_dotenv
import os
from storage import ChatMode, user_storage
from telegram import *
from telegram.ext import *
from storage import ChatMode, user_storage
from pydub import AudioSegment


async def new_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_storage.create_user(update.message.from_user.id, update.message.from_user.username)
    user_storage.add_message(update.message.from_user.id, update.message.from_user.username, "–ù–æ–≤—ã–π —á–∞—Ç", "–ù–æ–≤—ã–π —á–∞—Ç")
    await update.message.reply_text(f'–î–∞—Ä–æ–≤, {update.effective_user.first_name}. –Ø —Ç–∏–ø–∞ –±–æ—Ç. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å.')

async def start_voice_chat(update: Update, context: CallbackContext) -> None:
    # query = update.callback_query
    user_storage.set_chat_mode(update.effective_sender.id, update.effective_sender.username, ChatMode.VOICE)
    # await query.answer()
    await update.message.reply_text('üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –≤–∫–ª—é—á–µ–Ω')

async def start_text_chat(update: Update, context: CallbackContext) -> None:
    # query = update.callback_query
    user_storage.set_chat_mode(update.effective_sender.id, update.effective_sender.username, ChatMode.TEXT)
    # await query.answer()
    await update.message.reply_text('üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç –≤–∫–ª—é—á–µ–Ω')


async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("assistant", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"),
        BotCommand("new_chat", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"),
        BotCommand("change_voice_sample", "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü –≥–æ–ª–æ—Å–∞"),
        BotCommand("start_voice_chat", "–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"),
        BotCommand("start_text_chat", "–í–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç"),
    ])
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def change_voice_sample(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–∑–µ—Ü –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥.')
    context.user_data['awaiting_voice_sample'] = True


async def handle_voice_sample(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_voice_sample'):
        voice = update.message.voice
        if voice.duration < 30:
            await update.message.reply_text('–ì–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–∑–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            return

        file = await context.bot.get_file(voice.file_id)
        
        file_name = f'samples\{update.message.from_user.id}_voice_sample'
        await file.download_to_drive(f'{file_name}.ogg')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .ogg –≤ .wav
        AudioSegment.from_ogg(f'{file_name}.ogg').export(f'{file_name}.wav', format='wav')

        os.remove(f'{file_name}.ogg')
        context.user_data['awaiting_voice_sample'] = False
        await update.message.reply_text('–ì–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–∑–µ—Ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')


if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
    load_dotenv(dotenv_path='environment.env')
    # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —á–µ—Ä–µ–∑ os.getenv()
    bot_token = os.getenv('BOT_TOKEN')

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
    app = (
        ApplicationBuilder()
        .token(bot_token)
        .concurrent_updates(4)
        .post_init(post_init)
        .read_timeout(60)
        .write_timeout(60)
        .build()
    )

    app.add_handler(CommandHandler("new_chat", new_chat))
    app.add_handler(CommandHandler("assistant", handle_message))
    app.add_handler(CommandHandler("change_voice_sample", change_voice_sample))
    app.add_handler(CommandHandler("start_voice_chat", start_voice_chat))
    app.add_handler(CommandHandler("start_text_chat", start_text_chat))
    app.add_handler(MessageHandler(filters.VOICE & filters.ChatType.PRIVATE, handle_voice_sample))
    app.run_polling()

    
